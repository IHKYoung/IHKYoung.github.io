<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>🌟知识 on AhaKnow</title>
    <link>https://ahaknow.com/posts/know/</link>
    <description>Recent content in 🌟知识 on AhaKnow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Apr 2024 14:02:22 +0800</lastBuildDate>
    <atom:link href="https://ahaknow.com/posts/know/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前人笔记收集录</title>
      <link>https://ahaknow.com/posts/know/note-one-sows-and-another-reaps/</link>
      <pubDate>Wed, 24 Apr 2024 10:26:36 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-one-sows-and-another-reaps/</guid>
      <description>前人栽树，后人乘凉。 或者说，不造轮子要造车。 总之，就是有些东西，在互联网上已经有记录了，可以收集起来为己用！ Github添加Waka记录 可以</description>
    </item>
    <item>
      <title>开发实战：为什么要将函数实现与头文件分离</title>
      <link>https://ahaknow.com/posts/know/dev-header-source/</link>
      <pubDate>Sun, 28 Apr 2024 14:02:22 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-header-source/</guid>
      <description>在写C++工程的时候，习惯性的是将头文件与其实现分开编写的。 今天被问到了这个问题： “在写C++代码的时候，将函数实现直接写在头文件里，会怎么</description>
    </item>
    <item>
      <title>Linux：打包压缩相关的基本使用</title>
      <link>https://ahaknow.com/posts/know/linux-tar-usage/</link>
      <pubDate>Sat, 27 Apr 2024 22:27:17 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/linux-tar-usage/</guid>
      <description>tar 是一个广泛使用的 Unix/Linux 命令行工具，用于创建、维护、修改以及提取 tar 文件。 tar 文件通常是文件档案的集合，而 tar 本身是 Tape Archive 的缩写，起初是用来将数据备份到</description>
    </item>
    <item>
      <title>Protobuf：安装指定版本</title>
      <link>https://ahaknow.com/posts/know/note-install-protobuf/</link>
      <pubDate>Sat, 27 Apr 2024 15:41:46 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-install-protobuf/</guid>
      <description>第一次接触Protobuf，遇到了系统版本与编译文件版本不统一的情况，以优先解决问题的考虑出发，考虑先把版本统一，验证代码是否可行，之后再来</description>
    </item>
    <item>
      <title>SLAM：深刻理解对极几何</title>
      <link>https://ahaknow.com/posts/know/slam-epipolar-geometry/</link>
      <pubDate>Thu, 25 Apr 2024 11:42:26 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/slam-epipolar-geometry/</guid>
      <description>对极几何，从本质上理解应该是很简单的。 理解向量的内积（点积）和外积（叉积）是掌握对极几何的基础。 向量内积（点积） 定义： 向量的内积（或点积）是</description>
    </item>
    <item>
      <title>Dev Static vs Dynamic Library</title>
      <link>https://ahaknow.com/posts/know/dev-static-vs-dynamic-library/</link>
      <pubDate>Wed, 24 Apr 2024 17:50:36 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-static-vs-dynamic-library/</guid>
      <description></description>
    </item>
    <item>
      <title>Linux：创建具有权限限制的新用户</title>
      <link>https://ahaknow.com/posts/know/linux-create-user/</link>
      <pubDate>Wed, 24 Apr 2024 15:16:10 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/linux-create-user/</guid>
      <description>创建一个具有限制权限的用户，同时确保这个用户不能访问其他用户的文件或目录，可以通过以下步骤进行： 1. 创建新用户 使用useradd命令创建一个新</description>
    </item>
    <item>
      <title>Linux：内核启动不了之后</title>
      <link>https://ahaknow.com/posts/know/linux-kernel/</link>
      <pubDate>Wed, 24 Apr 2024 13:00:28 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/linux-kernel/</guid>
      <description>遇到了Linux新的内核启动卡死，老内核正常运行，索性就启动不了内核进行删除。 1. 查看当前运行的内核 在终端运行以下命令： uname -r 会得到下面这样的信</description>
    </item>
    <item>
      <title>TensorRT：最简明的安装流程</title>
      <link>https://ahaknow.com/posts/know/note-install-tensorrt/</link>
      <pubDate>Wed, 24 Apr 2024 11:07:22 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-install-tensorrt/</guid>
      <description>以下记录安装的TensorRT环境安装的最简单，也是最正确的流程。 因为很多时候依赖装乱了，直接装TensorRT会出现一堆依赖不存在的问题，</description>
    </item>
    <item>
      <title>开发实战：使用Spdlog管理调试信息</title>
      <link>https://ahaknow.com/posts/know/dev-spdlog-usage/</link>
      <pubDate>Tue, 23 Apr 2024 17:00:23 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-spdlog-usage/</guid>
      <description>此前写代码，习惯性 std::cout 和 std::cerr 这种直接可视化的打印，然后满屏密密麻麻的打印信息，而如果不需要了，就会在代码大段大段的注释，非常不美观，甚至可以说是</description>
    </item>
    <item>
      <title>开发实战：项目中的CMake技巧</title>
      <link>https://ahaknow.com/posts/know/dev-project-cmake/</link>
      <pubDate>Mon, 22 Apr 2024 22:57:28 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-project-cmake/</guid>
      <description>一个“好看”的CMake管理应该是这样的： ├── CMakeLists.txt ├── main_class.cpp ├── main.cpp ├── model │ ├── seg_0415.onnx │ └── seg_0415.trt ├── Parser │ ├── CMakeLists.txt │ ├── data_frame_parser.cpp │ └── data_frame_parser.h ├── RoadSeg</description>
    </item>
    <item>
      <title>开发实战：给代码属上大名</title>
      <link>https://ahaknow.com/posts/know/dev-auto-code-copyright/</link>
      <pubDate>Mon, 22 Apr 2024 16:52:02 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-auto-code-copyright/</guid>
      <description>关于代码💩山，已经不忍直视。。。 只希望自己能够写出整洁、大方、有魅力（又美丽）的代码。 所以呢，得给代码属个大名。 vscode用的久了，以此为</description>
    </item>
    <item>
      <title>开发实战：通过TCP Socket进行实施字节流解析</title>
      <link>https://ahaknow.com/posts/know/dev-parse-tcp-socket-byte-stream-file/</link>
      <pubDate>Mon, 22 Apr 2024 13:59:25 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-parse-tcp-socket-byte-stream-file/</guid>
      <description></description>
    </item>
    <item>
      <title>Shell：操作移动文件</title>
      <link>https://ahaknow.com/posts/know/note-shell-move-file/</link>
      <pubDate>Sun, 21 Apr 2024 22:36:36 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-shell-move-file/</guid>
      <description>主打一个“懒”字！ 移动文件啊，重命名啥的，动手拖拖不行嘛？！ 不行！用键盘，用命令行！ 比如： 想要移动 ZYC01981 - 01.jpg，同时又想把 - 01 后缀给去掉</description>
    </item>
    <item>
      <title>编程艺术：高质量编程指南C/C&#43;&#43;试题</title>
      <link>https://ahaknow.com/posts/know/art-c-c&#43;&#43;-exam/</link>
      <pubDate>Sat, 20 Apr 2024 19:21:42 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/art-c-c&#43;&#43;-exam/</guid>
      <description>本试题仅用于考查 C++/C 程序员的基本编程技能。内容限于 C++/C 常用语法，不涉及数据结构、算法以及深奥的语法。考试成绩能反映出考生的编程质量以及对 C++/C 的理解</description>
    </item>
    <item>
      <title>开发实战：解析H.264编码和LZ4压缩的相机图像</title>
      <link>https://ahaknow.com/posts/know/dev-decode-h.264-lz4-image-frames/</link>
      <pubDate>Thu, 18 Apr 2024 14:43:01 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-decode-h.264-lz4-image-frames/</guid>
      <description>在上一篇打通了读取字节流文件后，能够得到每一帧的字节数据了，这一篇就来解决为这些数据赋予实际意义。 彩色图像采用H.264编码 -&amp;gt; 那就需要按照H</description>
    </item>
    <item>
      <title>开发实战：解析二进制文件</title>
      <link>https://ahaknow.com/posts/know/dev-parse-binary-file/</link>
      <pubDate>Wed, 17 Apr 2024 16:34:35 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-parse-binary-file/</guid>
      <description>需要解析相机的字节流文件（就是一个一个Byte组成的文件，不解析的话没有啥实际意义）。 解析需要按照一定的规则，比如：如何确定数据的头（Hea</description>
    </item>
    <item>
      <title>Git：分支的基本操作</title>
      <link>https://ahaknow.com/posts/know/note-git-branch-basic/</link>
      <pubDate>Wed, 17 Apr 2024 10:13:39 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-git-branch-basic/</guid>
      <description>使用Git，在develop分支下创建一个新分支，然后在这个新分支上进行新功能开发。 git branch系列操作 1. 列出所有本地分支 git branch 2. 列出所有远</description>
    </item>
    <item>
      <title>Linux：上不了网了之路由表修复</title>
      <link>https://ahaknow.com/posts/know/linux-repair-routing-table/</link>
      <pubDate>Tue, 16 Apr 2024 11:04:42 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/linux-repair-routing-table/</guid>
      <description>连接一个网口设备，导致上不了网，咋怎？</description>
    </item>
    <item>
      <title>Leetcode：189. 轮转数组</title>
      <link>https://ahaknow.com/posts/know/leetcode-189-rotate-array/</link>
      <pubDate>Mon, 15 Apr 2024 11:36:04 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-189-rotate-array/</guid>
      <description>Given an integer array nums, rotate the array to the right by k steps, where k is non-negative. Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3]</description>
    </item>
    <item>
      <title>Leetcode：169. 多数元素</title>
      <link>https://ahaknow.com/posts/know/leetcode-169-majority-element/</link>
      <pubDate>Mon, 15 Apr 2024 09:27:11 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-169-majority-element/</guid>
      <description> Boyer-Moore 投票算法</description>
    </item>
    <item>
      <title>Leetcode：80. 删除有序数组中的重复项 II</title>
      <link>https://ahaknow.com/posts/know/leetcode-80-remove-duplicates-from-sorted-array-ii/</link>
      <pubDate>Fri, 12 Apr 2024 13:19:53 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-80-remove-duplicates-from-sorted-array-ii/</guid>
      <description>一道值得反复品味的经典双指针算法</description>
    </item>
    <item>
      <title>Blog：奇思妙想待办项</title>
      <link>https://ahaknow.com/posts/know/blog-todo/</link>
      <pubDate>Fri, 12 Apr 2024 11:29:40 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/blog-todo/</guid>
      <description>我发现我的思维特别容易发散，就是干这一件事，脑海中突然有了其他灵感，此前的做法是“直接插队的优先队列”，就是放下手中活，把突然想到去办了，其</description>
    </item>
    <item>
      <title>Blog：Hugo写作小技巧 </title>
      <link>https://ahaknow.com/posts/know/blog-tips/</link>
      <pubDate>Thu, 11 Apr 2024 12:14:57 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/blog-tips/</guid>
      <description>记录一些实用Hugo写博客的小技巧。 —— 因为如果当时不记录，那么日后肯定不会再记录的！（懒！） 使用Archetype预设模版 在使用 hugo new 命令创</description>
    </item>
    <item>
      <title>Leetcode：26删除有序数组中的重复项</title>
      <link>https://ahaknow.com/posts/know/leetcode-26-remove-duplicates-from-sorted-array/</link>
      <pubDate>Thu, 11 Apr 2024 11:41:10 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-26-remove-duplicates-from-sorted-array/</guid>
      <description>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: Change the array nums such that the first</description>
    </item>
    <item>
      <title>Leetcode：27移除元素</title>
      <link>https://ahaknow.com/posts/know/leetcode-27-remove-element/</link>
      <pubDate>Thu, 11 Apr 2024 11:14:47 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-27-remove-element/</guid>
      <description>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val. Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things: Change the array nums such that</description>
    </item>
    <item>
      <title>Leetcode：88合并两个有序数组</title>
      <link>https://ahaknow.com/posts/know/leetcode-88-merge-sorted-array/</link>
      <pubDate>Thu, 11 Apr 2024 10:19:57 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/leetcode-88-merge-sorted-array/</guid>
      <description>LeetCode上“最简单”的一道题了吧？ 长时间没有写过题，面试的时候竟然不会写了，奇耻大辱的一件事！ You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n,</description>
    </item>
    <item>
      <title>Python：一个正则表达式的小例子</title>
      <link>https://ahaknow.com/posts/know/note-regex-example/</link>
      <pubDate>Wed, 10 Apr 2024 13:04:34 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-regex-example/</guid>
      <description>我想重命名一个文件（手动操作是不可能的，懒！） 将“清晰易懂的的线性代数，国立阳明交通大学周志成，国语版mit线性代数Gilbert Strang LA_1</description>
    </item>
    <item>
      <title>Python：MP4的音轨修复</title>
      <link>https://ahaknow.com/posts/know/note-mp4-audio-track-repair/</link>
      <pubDate>Tue, 09 Apr 2024 22:40:15 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/note-mp4-audio-track-repair/</guid>
      <description>又干了一件：“为了一碟醋，包了一锅饺子”的事。。。 就是重新开始学习Strang老爷子的线性代数课了，然后下载了之前国内字幕组的版本（多年不好</description>
    </item>
    <item>
      <title>博客优化：自定义字体加速显示</title>
      <link>https://ahaknow.com/posts/know/blog-font-display-acceleration/</link>
      <pubDate>Tue, 09 Apr 2024 21:25:15 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/blog-font-display-acceleration/</guid>
      <description>博客里使用了自定义的字体，最开始直接采用ttf文件加载的方式，因为博客内容全部是静态存在Github上的，这种直接加载多少有点慢，所以想了一</description>
    </item>
    <item>
      <title>SLAM十四讲第二讲：初识SLAM</title>
      <link>https://ahaknow.com/posts/know/slam14-ch2/</link>
      <pubDate>Tue, 09 Apr 2024 16:03:13 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/slam14-ch2/</guid>
      <description>重复是学习之母，再读SLAM第一篇</description>
    </item>
    <item>
      <title>SLAM十四讲第一讲：预备知识</title>
      <link>https://ahaknow.com/posts/know/slam14-ch1/</link>
      <pubDate>Mon, 08 Apr 2024 20:27:50 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/slam14-ch1/</guid>
      <description>边做题边学习</description>
    </item>
    <item>
      <title>3D视觉感知</title>
      <link>https://ahaknow.com/posts/know/aha-3d-visual-perception/</link>
      <pubDate>Sun, 07 Apr 2024 10:09:54 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/aha-3d-visual-perception/</guid>
      <description>从现状到发展</description>
    </item>
    <item>
      <title>二维平面下的坐标系变换</title>
      <link>https://ahaknow.com/posts/know/aha-2d-coordinate-transformation/</link>
      <pubDate>Sat, 06 Apr 2024 21:13:29 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/aha-2d-coordinate-transformation/</guid>
      <description>以实际的移动机器人为例，学习坐标系变换的数学原理</description>
    </item>
    <item>
      <title>博客自定义：实现Mac风格的代码栏</title>
      <link>https://ahaknow.com/posts/know/blog-mac-style-code/</link>
      <pubDate>Wed, 27 Mar 2024 20:39:16 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/blog-mac-style-code/</guid>
      <description>就是要实现下面这种效果： # 就是展示一下效果^-^ 像这种想法怎么样一步步实现的呢？ 对于前端开发来说，最好的学习方式就是阅读源码学习： 直接看实现</description>
    </item>
  </channel>
</rss>
