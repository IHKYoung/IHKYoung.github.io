[{"content":"Linux随手记📝 磁盘相关 查看挂载盘的文件格式: 可以使用df命令配合-T选项来查看挂载盘的文件格式。例如：\n1 df -T 或者使用lsblk命令配合-f选项：\n1 lsblk -f 修改挂载盘的名字: 可以使用e2label命令来修改一个ext2/ext3/ext4文件系统的标签。例如，如果想将/dev/sda1的标签更改为“新名字”，你可以运行：\nbash\n1 sudo e2label /dev/sda1 新名字 如果文件系统不是ext类型，可以使用对应的标签命令，例如对于FAT文件系统，可以使用dosfslabel。\n可以使用exfatlabel命令来更改exFAT文件系统的标签。以下是更改exFAT文件系统标签的命令示例：\n1 sudo exfatlabel /dev/sda1 CKData 确保系统中已安装了支持exFAT文件系统的工具，否则需要首先安装它们\n1 sudo apt-get install exfat-fuse exfat-utils 或\n1 sudo apt install exfatprogs 将挂载盘格式化成ext4: 使用mkfs.ext4命令来格式化挂载盘。请注意，这将删除该分区上的所有数据，因此请确保先备份任何重要数据。假设要格式化的盘符是/dev/sda1，则命令如下：\n1 sudo mkfs.ext4 /dev/sda1 重新格式化为exFAT文件系统：\n以下是格式化分区/dev/sda1为exFAT文件系统的步骤：\n首先，确保已经卸载了要格式化的分区。可以使用umount命令来卸载分区：\n1 sudo umount /dev/sda1 然后，可以使用mkfs.exfat命令来格式化分区。如果需要指定卷标（例如“CKData”），可以使用-n选项：\n1 sudo mkfs.exfat -n \u0026#34;CKData\u0026#34; /dev/sda1 如果系统上没有mkfs.exfat命令，需要安装支持exFAT的软件包：\n1 sudo apt-get install exfat-utils 或\n1 sudo apt install exfatprogs 关于磁盘的label和partition 磁盘的分区和标签是计算机存储系统的不同层次和方面\n磁盘：磁盘是物理存储设备，可以包括硬盘驱动器（HDD）、固态硬盘（SSD）等。一个磁盘可以分为多个部分，称为分区。\n分区：分区是磁盘上的连续空间段，它可以被格式化为特定的文件系统，例如ext4、exFAT等。分区允许在同一物理磁盘上运行多个不同的文件系统，或者逻辑上将磁盘划分为不同的部分。\n标签（Label）：标签是给磁盘或分区分配的可选名称，可以使其更容易识别。例如，可以给存储音乐文件的分区命名为“Music”。\nLinux开机自动挂载 可以通过修改/etc/fstab文件来实现。以下是步骤：\n找到分区的UUID：使用以下命令找到分区的UUID（Universally Unique Identifier）：\n1 sudo blkid 寻找要挂载的分区相对应的UUID。\n创建挂载点：选择或创建一个目录作为挂载点。例如，如果要将分区挂载到/media/mydrive，确保该目录存在：\n1 sudo mkdir -p /media/mydrive 编辑/etc/fstab文件：使用文本编辑器（如nano或vi）打开/etc/fstab文件：\n1 sudo nano /etc/fstab 在文件的末尾添加一行，用以下格式：\n1 UUID=your-uuid-here /media/mydrive ext4 defaults 0 0 这里的your-uuid-here是从blkid命令中获取的UUID。将ext4替换为分区使用的文件系统类型。\n挂载分区：保存并关闭文件，然后运行以下命令来挂载分区：\n1 sudo mount -a 现在，该分区应该每次开机时都会自动挂载到指定的挂载点。\n至于挂载点的问题，如果想要将分区自动挂载到/media/下的某个子目录中，可以在/etc/fstab文件中指定挂载点。\n例如，可以在/etc/fstab文件中使用以下条目：\n1 UUID=your-uuid-here /media/your-drive-label ext4 defaults 0 0 需要替换your-uuid-here和your-drive-label为相应的UUID和想要的挂载点名字。\n软连接 软连接，又称符号链接（symbolic link），在Linux和UNIX系统中是一个特殊类型的文件，该文件包含对其他文件或目录的引用。\n软连接可以指向同一文件系统内的文件或目录，也可以指向其他文件系统内的文件或目录。\n以下是软连接的常见用法：\n创建软连接： 使用ln命令，加上-s选项来创建软连接。例如，要创建一个指向/mnt/disk/yck的软连接yck，可以使用以下命令：\n1 ln -s /mnt/disk/yck yck 理解软连接： 软连接类似于Windows中的快捷方式，它只是一个引用，指向实际文件或目录的路径。如果删除软连接，原始文件或目录不会受到影响。但是，如果删除了软连接所指向的原始文件或目录，则软连接将变为\u0026quot;悬挂\u0026quot;，即失效的链接。\n删除软连接： 要删除软连接，可以使用rm命令，就像删除普通文件一样。例如，删除上面创建的yck软连接：\n1 rm yck 查看软连接： 使用ls -l命令，可以查看软连接的详细信息，其中会显示软连接指向的原始路径。\n注意，当操作软连接时，大多数命令（例如cat、cd、cp等）都会自动\u0026quot;跟随\u0026quot;软连接，即操作软连接背后的实际文件或目录。但是，删除软连接时需要特别小心，确保只删除软连接本身，而不是其背后的实际文件或目录。\n补充：\n软链接可以被视为一个特殊类型的文件，它包含了对目标文件或目录的引用。可以使用普通的文件命令（如ls，cat等）与软链接进行交互。 即使使用rm -rf yck，删除的也只是软连接 由于软链接是一个文件，所以创建时有同名的路径的话，会在路径下创建！ 查看文件占据大小 在Linux终端中，如果想要查看当前目录下文件所占据的大小，可以使用du和ls命令。\n使用du命令: du是\u0026quot;disk usage\u0026quot;的缩写，用于估计文件和目录的磁盘使用空间。\n如果想查看当前目录下的每个文件和文件夹的大小，可以使用以下命令：\n1 du -sh * 这里的-s选项表示只显示每个参数的总和，而-h选项则以人类可读的格式显示大小（例如，KB、MB、GB等）。\n使用ls命令: 还可以使用ls命令的-l和-h选项来查看文件大小。\n1 ls -lh 这里的-l选项表示长格式列出信息，-h选项表示以人类可读的格式显示大小。\n上述两个方法的差别在于du可以显示目录的整体大小，而ls主要关注单个文件的大小。\n💡查找指定文件大小的脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash if [ \u0026#34;$#\u0026#34; -ne 2 ]; then echo \u0026#34;Usage: $0 \u0026lt;directory\u0026gt; \u0026lt;file_size\u0026gt;\u0026#34; exit 1 fi directory=$1 file_size=$2 # 创建一个临时文件来保存查找结果 temp_file=$(mktemp) # 使用find命令查找文件，并将结果存储在临时文件中 # -print0和xargs -0一起使用，以便正确处理文件名中包含特殊字符的文件 sudo find \u0026#34;$directory\u0026#34; -type f -size +\u0026#34;$file_size\u0026#34; -exec ls -lh {} \\; | tee /dev/stderr | sort -rh -k5 \u0026gt; \u0026#34;$temp_file\u0026#34; # 打印出分隔行 echo \u0026#34;-------------======================================================-------------\u0026#34; # 打印排序后的结果 cat \u0026#34;$temp_file\u0026#34; # 删除临时文件 rm \u0026#34;$temp_file\u0026#34; 通过网络实现硬盘挂载（NFS） NFS（Network File System）\n这里说的是最简单的形式：本地局域网+硬盘挂载\n基本步骤 服务端设置 首先，在共享磁盘的服务器上，需要安装NFS服务并配置共享目录。以下是基本步骤：\n安装NFS服务：\n1 2 sudo apt-get install nfs-kernel-server # 在Debian/Ubuntu系统中 sudo yum install nfs-utils # 在RedHat/Fedora系统中 编辑配置文件：\n打开/etc/exports文件并添加以下行（将/path/to/shared/directory替换为需要共享的目录路径）：\n1 /path/to/shared/directory *(rw,sync,no_subtree_check) 启动NFS服务：\n1 sudo systemctl restart nfs-kernel-server 如果修改了/etc/exports，可以使用sudo exportfs -ra\n客户端设置 接下来，在想要挂载共享目录的客户端机器上进行以下操作：\n安装NFS客户端工具：\n1 2 sudo apt-get install nfs-common # 在Debian/Ubuntu系统中 sudo yum install nfs-utils # 在RedHat/Fedora系统中 挂载远程目录：\n将共享目录挂载到本地目录（例如/mnt/remote）：\n1 sudo mount -t nfs server_ip:/path/to/shared/directory /mnt/remote 📝细节讨论 参数说明 1 /path/to/shared/directory *(rw,sync,no_subtree_check) rw: 这个选项允许远程客户端对共享目录进行读写操作。如果想让共享目录只能读取，可以使用ro选项。\nsync: 这个选项确保在请求完成之前，所有的文件系统操作都被物理写入磁盘。这样可以确保数据的一致性，但可能会稍微降低性能。如果选择async选项，则操作可能会在数据还未完全写入磁盘时返回，这可能会提高性能，但如果在数据完全写入之前系统崩溃，则可能会丢失数据。\nno_subtree_check: 这个选项禁用子树检查。当文件被移动或删除时，NFS会进行子树检查来确保文件的一致性。禁用此检查可能会提高性能。如果没有这个特定需求，通常建议使用此选项。\n补充：\nno_root_squash: 默认情况下，远程系统上的root用户映射为匿名用户。使用no_root_squash选项允许远程root用户以本地root权限执行操作。 secure: 使用这个选项将强制NFS请求从安全的端口（小于1024）发送。这有助于提高安全性。 all_squash: 这个选项将远程用户的所有操作映射为本地匿名用户，提供了更严格的权限控制。 anonuid 和 anongid: 这些选项允许指定匿名用户和组的UID和GID，通常与all_squash一起使用。 insecure: 允许客户端从大于1024的非安全端口连接。 举例\n在/etc/exports文件中配置NFS共享，可以使用这些选项来控制共享的行为。例如：\n1 /path/to/shared/directory *(rw,sync,no_subtree_check,no_root_squash) 这个例子中，共享目录允许读写、同步写入、禁用子树检查，并允许远程root用户以本地root权限操作。\n强调‼️\nanonuid 和 anongid 这两个选项允许指定服务器端的用户ID（UID）和组ID（GID）。\n当使用 all_squash 选项将所有远程用户的操作映射为本地匿名用户时，可以通过这两个选项设置该匿名用户和组的具体UID和GID。\n例如：\n1 /path/to/shared/directory *(rw,all_squash,anonuid=1003,anongid=1003) 在这个例子中，所有远程用户访问 /path/to/shared/directory 的操作都会被映射为本地服务器上UID和GID都为1003的用户和组。这样可以提供更精确的权限控制，确保远程访问的权限与本地特定用户和组的权限相匹配。\n这样的配置可以确保远程用户不会具有比所指定的本地用户更多的权限，从而增加了系统的安全性。\n也就是说：\n当客户端挂载远程NFS共享时，客户端上的用户权限是由客户端自身的操作系统和配置决定的。然而，当客户端与NFS服务器进行交互时，服务器上的anonuid和anongid设置（与all_squash选项结合使用）会将所有客户端用户的操作映射到指定的本地服务器用户和组上。\n例如，如果NFS共享配置为：\n1 /path/to/shared/directory *(rw,all_squash,anonuid=1003,anongid=1003) 那么无论客户端上的用户是谁，他们通过这个共享访问服务器上的文件时，都会被服务器视为UID为1003和GID为1003的本地用户和组。服务器上的文件权限会按照这个UID和GID来应用。\n因此，通过这种方式，服务器可以精确地控制远程客户端对共享资源的访问权限，而不必依赖于客户端上的用户配置。\nNAF和NAS NFS（Network File System）和NAS（Network Attached Storage）确实在功能和用途上有一些相似之处，但它们在实现和目的方面存在显著的区别。以下是它们之间的主要差异：\nNFS（Network File System）网络文件系统\n定义与功能: NFS是一种分布式文件系统协议，允许客户端通过网络访问服务器上的文件，就像访问本地文件一样。 适用场景: NFS通常用于组织或企业环境中，用于在不同系统之间共享文件和数据。 依赖性: NFS是一种协议，需要在现有的服务器和客户端操作系统上安装和配置。NFS不是一个独立的存储设备。 性能和灵活性: NFS允许灵活的配置和优化，可以根据具体需求调整性能和安全性。 跨平台: NFS支持各种操作系统，允许不同类型的客户端访问共享文件。 NAS（Network Attached Storage）网络连接存储\n定义与功能: NAS是一种独立的存储设备，通过网络提供文件存储和共享服务。NAS不仅包括硬件存储设备，还包括内置的操作系统和文件服务功能。\n适用场景: NAS用于家庭和企业环境中，为多个用户提供集中存储和共享文件的解决方案。NAS通常更易于设置和管理。\n自包含性: NAS是一个完整的存储解决方案，包括硬件、软件和所有必要的接口。用户只需将NAS连接到网络并进行简单配置。\n性能和灵活性: 与NFS相比，NAS可能更关注易用性和可靠性。某些高端NAS设备允许高级配置，但普通消费级NAS可能提供的配置选项较少。\n协议支持: NAS通常支持多种文件共享协议，包括NFS、SMB/CIFS等，因此可以与多种操作系统兼容。\n总结\nNFS是一种协议，用于允许跨网络的文件共享，可以在现有硬件和操作系统上配置。 NAS是一个完整的存储解决方案，包括硬件和软件，用于通过网络提供文件存储和共享服务。 NFS更灵活和高效，适用于对性能和配置有特殊需求的组织。 NAS通常更易于安装和管理，适用于需要集中存储和共享文件的家庭和小型企业。 NAF磁盘的文件系统 有一个观点： “exFAT可能不适合作为NFS共享的文件系统”\n下面，了解一下文件系统的基本常识：\nWindows文件系统 FAT (File Allocation Table)\n文件分配表（FAT）是Microsoft早期的文件系统，适用于简单的存储需求。 结构: FAT使用文件分配表来跟踪磁盘上文件的位置。它是一种简单的结构，没有许多现代文件系统的特性。 碎片: 因为FAT缺乏高级的空间管理，所以文件碎片化是一个问题。\n大小限制: FAT32有4GB的文件大小限制和2TB的卷大小限制。\nexFAT与FAT32的主要区别:\n文件大小限制:\nFAT32: 单个文件最大4GB。 exFAT: 单个文件最大可以达到16EB（百亿兆字节）。 分区大小限制:\nFAT32: 单个分区最大2TB。 exFAT: 没有明显的实际分区大小限制。 性能: exFAT通常在处理大文件和大分区时具有更高的效率，因为它采用了更先进的数据结构。\n兼容性:\nFAT32: 在各种操作系统中的支持更广泛。 exFAT: 主要为现代操作系统设计，不一定适用于较旧的系统。 功能: exFAT添加了一些改进，例如时间戳支持以及更有效的空间利用，但依然没有像EXT4或NTFS那样的先进功能。\nNTFS (New Technology File System)\n新技术文件系统（NTFS）是Windows的主要文件系统。它具有许多现代功能，如文件压缩、加密和详细的权限管理。 日志功能: NTFS使用日志记录文件操作，增加了可靠性和恢复能力。 权限管理: 它支持详细的访问控制列表（ACL）。\n压缩和加密: NTFS支持本地文件压缩和加密。\n元数据: NTFS存储关于文件的大量元数据，包括安全信息、归属和更多。\nexFAT（扩展文件分配表）是为了优化闪存存储，如USB闪存驱动器和SD卡而设计的。它比FAT32现代，可以支持更大的文件和卷。\n不足之处：\n没有日志功能: exFAT没有日志功能，这意味着如果在写操作过程中出现断电或崩溃等情况，可能会导致文件系统损坏。\n没有本地权限管理: exFAT没有本地文件和文件夹级别的权限管理，这在共享环境中可能是一个限制。\n性能问题: exFAT是为闪存驱动器（如SD卡和USB闪存驱动器）优化的文件系统，因此，其性能可能不如专为高速硬盘和网络存储解决方案设计的文件系统。在高负载或需要频繁读写的网络环境下，exFAT可能会遇到性能瓶颈。\n不是原生支持: 尽管exFAT是一种在Windows、macOS和一些Linux发行版之间通用的文件系统，但不是所有的Linux系统都原生支持exFAT\nLinux文件系统 Linux的扩展文件系统。ext3是ext2的一个升级，增加了日志功能。ext4进一步增加了性能和可靠性改进。\next2\n非日志: ext2是Linux的第一个扩展文件系统，没有日志功能。\n块组: 文件和目录在块组中存储，有助于减少碎片化。\n大小限制: 文件大小最多可以达到2TB，卷大小最多可以达到32TB。\next3\n日志功能: 在ext2的基础上增加了日志功能，提高了可靠性。\n兼容性: 与ext2向后兼容。\next4\n子卷: 支持多达64k的子卷。\n预分配: 可以在创建文件之前预分配空间。\n延迟分配: 通过延迟分配磁盘空间，提高了写入性能。\nXFS, Btrfs等\nXFS: 是一种高性能的日志文件系统，特别适合大型文件。\nBtrfs: 提供了卷快照、数据完整性检查和更多现代功能。\n为什么EXT4可能更适合网络硬盘：\n日志功能: EXT4使用日志来记录文件操作，有助于数据恢复和完整性，在系统崩溃或断电时更可靠。\n权限管理: EXT4支持复杂的文件权限和所有权管理，有助于在网络环境中实施合适的访问控制。\n性能: EXT4针对Linux优化，通常在Linux服务器上表现更好，特别是在高负载环境下。\n高级功能: EXT4支持一些高级功能，如数据压缩、加密和快照等。\n成熟与稳定: EXT4是Linux主流的文件系统之一，被广泛用于各种用途，包括网络存储，因此在支持和稳定性方面更有保障。\nmacOS文件系统 HFS+ (Hierarchical File System Plus)\n层次文件系统加（HFS+），苹果早期的文件系统。 碎片化: 有时可能需要碎片整理。 不支持一些现代功能: 例如没有本地压缩和加密支持。 APFS (Apple File System)\n苹果文件系统（APFS）是macOS High Sierra及更高版本的默认文件系统。它针对闪存/SSD存储进行了优化，并增加了加密等现代功能。 优化闪存: 专门针对SSD和闪存驱动器优化。 空间共享: 允许多个卷共享同一个底层存储空间。\n快照: 支持卷和文件系统的快照。\n数据完整性: 通过校验和保护数据的完整性。\nLinux权限问题 先从用户和组的区别来理解：\n用户（User） 在Linux中，每个用户都有一个唯一的用户ID（UID）。有三种主要类型的用户：\nRoot用户: 这是系统的超级用户，有最高权限。UID为0的用户是root用户，可以执行任何操作。 系统用户: 用于运行系统进程和服务的用户。 常规用户: 这些是普通的登录用户，可以是人工创建的账户或通过其他方式（如LDAP）管理的账户。 LDAP\nLDAP代表轻型目录访问协议（Lightweight Directory Access Protocol）。它是一种开放、中立的应用协议，用于访问和维护分布式目录信息服务。目录服务可以用来存储各种对象，如用户、组、密码、邮箱等，以结构化的方式组织。\nLDAP通常用于大型组织，其中用户、组和其他资源需要跨多个系统和应用进行统一管理。\n组（Group） 组是一组用户的集合，用于管理权限。每个组都有一个唯一的组ID（GID）。\nRoot组: 通常包括root用户，有时还包括其他具有高级权限的用户。 系统组: 用于管理系统服务和进程的组。 用户定义组: 管理员或用户可以创建的组，用于共享资源或控制访问权限。 权限 Linux文件系统具有三组权限：\n所有者权限: 文件或目录的所有者的权限。 组权限: 文件或目录的所属组的权限。 其他权限: 除所有者和组成员外，所有其他用户的权限。 每组权限都可以有以下三种设置：\n读（r）: 允许读取文件或目录内容。 写（w）: 允许修改文件或目录内容。 执行（x）: 允许执行文件或在目录中查看内容。 用户和组的区别 用户是独立的实体，拥有登录凭据和个人文件和设置。 组是一组用户的集合，用于方便地控制对资源的访问。 每个用户都属于至少一个组。在大多数系统中，每个用户都有与其用户名相同的主要组。 用户可以属于多个组。 可以这样理解：\nRoot用户具有系统上的最大权限。 Root组通常包括root用户，并可能包括其他具有高权限的用户。 创建其他用户时，通常也会创建一个与其同名的主组。 组可以包括多个用户。 组不包括其他组。 chmod 用户名:组名 权限 文件名 注意是用户:组这个顺序 ","permalink":"http://ahaknow.com/posts/know/0821/","summary":"Linux随手记📝 磁盘相关 查看挂载盘的文件格式: 可以使用df命令配合-T选项来查看挂载盘的文件格式。例如： 1 df -T 或者使用lsblk命令配合-","title":"📝0821：Linux基础+Onnx模型"},{"content":"","permalink":"http://ahaknow.com/categories/","summary":"","title":"🖇️ 归档"}]